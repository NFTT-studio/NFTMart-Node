#!/usr/bin/env bash

set -e

# Make sure we are in the right place
export BASE="$(cd "$(dirname "$(realpath $0)")"; git rev-parse --show-toplevel)"

export GREY='1;30'
export RED='1;31'
export GREEN='1;32'
export YELLOW='1;33'
export BLUE='1;34'
export MAGENTA='1;35'
export CYAN='1;36'
export WHITE='1;37'

nftmart-key(){
  docker run -i btwiuse/nftmart:beta key "$@"
}

nftmart-build-spec(){
  docker run -i btwiuse/nftmart:beta build-spec "$@"
}

nftmart(){
# -e PORT -e WS_PORT -e RPC_PORT 
# -p $PORT:$PORT -p $WS_PORT:$WS_PORT -p $RPC_PORT:$RPC_PORT 
  docker run --rm --name "${FUNCNAME[1]}" -e PORT -e WS_PORT -e RPC_PORT --net host -it -v $BASE/state/:/data/state/ btwiuse/nftmart:beta \
    -lruntime=debug \
    --execution=NativeElseWasm \
    --rpc-cors=all \
    --rpc-methods=Unsafe \
    --unsafe-ws-external \
    --chain staging_spec_raw.json \
    --validator \
    --wasm-execution Interpreted \
    --ws-max-connections=10000 \
    --no-prometheus \
    "$@"
}

## log utils

debug_json(){
  local -a privateFields=(
    secretPhrase # specific to root / session key
    secretKeyUri # specific to stash / controller key
    secretSeed
  )
  local -a publicFields=(
    accountId
    publicKey
    ss58Address
  )
  cat "$1" | jq -r 'to_entries[]|"\(.key) \(.value)"' | while read k v; do
    if [[ $k == secret* ]]; then
      secret "$1: $k = $v"
    else
      public "$1: $k = $v"
    fi
  done
}

get(){
  cat "$1" | jq -r "$2"
}

br(){
  echo 1>&2
}

log(){
  CTX="$(echo ${FUNCNAME[*]} | xargs -n1 | sed -e 1,2d -e \$d | tac | xargs | sed -e 's, ,->,g')"
  echo "[${FUNCNAME[1]^^}] $(date +%H:%M:%S) ($CTX) $@"
}

public(){
  [[ -z "$DEBUG" ]] && return
  log "$@" | GREP_COLOR="$GREEN" grep --color=always . 1>&2 
}

secret(){
  [[ -z "$DEBUG" ]] && return
  log "$@" | GREP_COLOR="$GREY" grep --color=always . 1>&2 
}

debug(){
  [[ -z "$DEBUG" ]] && return
  log "$@" | GREP_COLOR="$YELLOW" grep --color=always . 1>&2 
}

info(){
  log "$@" | GREP_COLOR="$WHITE" grep --color=always . 1>&2 
}

warn(){
  log "$@" | GREP_COLOR="$RED" grep --color=always . 1>&2 
}

